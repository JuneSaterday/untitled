


并发编程实战



引起线程不安全的因素：
（1）可见性
（2）原子性 （源头是线程切换引起）
（3）指令重排序




为了解决线程不安全，引入了java内存模型（解决可见性和有序性）

1.三个关键字
volatile，原始语义，禁用CPU缓存
synchronized，
final



2.六项happens-before规则：

想表达的意思：前面一个操作的结果对后续操作是可见的
正式的说法：happens-before约束了编译器的优化行为，虽然允许编译器优化，但要求编译器优化后一定遵守happens-before原则

一下六项规则均是关于可见性的
（1）程序的顺序性规则：在一个线程中，按照程序顺序，前面的操作happens before后面的操作
（2）volatile变量原则：对volatile变量的写操作，happens before于接下来对volatile变量的读操作
（3）传递性原则：A happens-before B, B happens-before C, A happens-before C
（4）管程中锁的规则：对一个锁的解锁 happens-before 于后续对这个锁的加锁
（5）线程的start()规则：关于线程启动。主线程A启动子线程B后，子线程B能够看到主线程A启动子线程B前的操作
（6）线程的join()规则：关于线程等待的。主线程A等待子线程B完成（通过调用B.join()方法），当子线程B完成后，主线程A能看到子线程B的操作，这里看到指的是对“共享变量”的操作


(4)中的锁如果是synchronized的话，happens-before直接保证了，
如果是java SDK的lock,如何保证呢？

利用了 volatile 相关的 Happens-Before 规则，ReentrantLock内部持有一个volatile的成员变量state,
获取锁的时候，会读写state的值；解锁的时候，也会读写state的值





互斥锁解决原子性问题

互斥：同一时刻只有一个线程执行

sync锁的对象monitor指针指向一个ObjectMonitor对象，所有线程加入他的entrylist里
面，去cas抢锁，更改state加1拿锁，执行完代码，释放锁state减1，和aqs机制差不多，
只是所有线程不阻塞，cas抢锁，没有队列，属于非公平锁。
wait的时候，线程进waitset休眠，等待notify唤醒





死锁

只有满足4个条件时，才会出现死锁
1.互斥，共享资源X，Y只能被一个线程占用
2.占有且等待，线程已经占有共享资源X，在等待共享资源Y时，不释放共享资源X
3.不可抢占，其他线程不能强行抢占线程T1占有的资源
4.循环等待，线程T1等待线程T2占有的资源，线程T2等待线程T1占有的资源


1不可破坏，只能想办法破坏2，3，4

针对2占有且等待，可以一次性申请所有的资源，这样就不存在等待了
针对3不可抢占，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源
针对4循环等待，可以靠按序申请资源，指资源是有线性顺序，先申请资源号小的，再申请资源号大的，破坏循环





线程的六种state                    操作系统中线程的状态

NEW（初始化状态）						初始状态

RUNNABLE（可运行/运行状态）,			可运行状态
									运行状态

BLOCKED（阻塞状态）,					休眠状态
WAITING（无时限等待）,
TIMED_WAITING（有时限等待）,

TERMINATED（终止）					终止状态


多线程的目的，提高吞吐量，降低延迟

线程数的设置：
CPU密集型计算：线程的数量=CPU核数，工程上一般设置为线程的数量=CPU核数 + 1
I/O密集型计算：线程数量= [1 + （I/O耗时/CPU耗时）] * cpu核数


局部变量为什么是安全的？
每个线程都有自己的调用栈，局部变量保存在各自线程的调用栈中，不会共享






1.有了synchronized，为什么还要设计lock，仅仅是"重复造轮子吗"？

对于死锁问题，有破坏不可抢占条件方案，这个方案synchronized没法解决，
原因是synchronized申请资源时，申请不到，线程就直接进入阻塞状态。

对于”不可抢占“条件，占用部分资源时，如果去申请其他资源，申请不到时，
可以主动释放它占有的资源，这样”不可抢占“条件就被破坏了


3种方案：

1.能够响应中断
void lockInterruptibly();

2.支持超时
tryLock(long time, TimeUnit unit);

3.非阻塞地获取锁
tryLock()




Doug Lea用锁的三个最佳原则：
1. 永远只在更新对象的成员变量时加锁
2. 永远只在访问可变的成员变量时加锁
3. 永远不在调用其他对象的方法时加锁




ReentrantLock 加锁，解锁的过程

ReentrantLock分为公平锁和非公平锁


以非公平锁为例：

final void lock() {
    if (compareAndSetState(0, 1))
        setExclusiveOwnerThread(Thread.currentThread());
    else
        acquire(1);
}



// AQS实现
public final void acquire(int arg) {
    if (!tryAcquire(arg) &&
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        selfInterrupt();
}




























