

-Xmx value
最大堆体积

-Xms value
初始的最小堆体积

-XX:NewRatio value
新生代与老年代的比例
默认为2

-XX:OldSize value
------------------ = 2
-XX:NewSize value


-XX:SurvivorRatio value
survivior与eden的比例，默认为8


-XX:MaxTenuringThreshold=<N>
晋升老年代的阀值，默认15，最大15， 0-15。4bit保存

-XX:+UsePSAdaptiveSurvivorSizePolicy
动态分配的策略，根据生成对象的速率，以及 Survivor 区的使
用情况动态调整 Eden 区和 Survivor 区的比例。



1.对象已死？

（1）引用计数法 ：弊端，额外空间来存储计数器，繁琐的更新操作，无法处理相互引用对象
（2）可达性分析 ：



2.垃圾回收3种方式


（1）清除（sweep）：用一个空闲列表记录已死亡对象所占据的内存，当需要新建对象时，从空闲列表中寻找内存分配。

缺点：（1）容易产生内存碎片，堆中对象连续分布，可能会出现内存碎片总和够用，但不能分配对象
	  （2）分配效率低，连续内存分配时，可以用指针加法分配；碎片分配时，需要逐个查找可分配空间

（2）压缩（compact）：把存活的对象聚集内存区域的起始位置，以便留出连续的空间。

优点：解决碎片化问题
缺点：压缩性能开销大

（3）复制（copy）：内存区域两等分，两个指针标记为from，to。分配的时候只用from，回收时把存活对象挪到to。再交换from，to指针

优点：解决碎片化问题
缺点：空间利用率低





3.java的设计

大部分对象只存活一小段时间，小部分活下来的对象会存活很长时间。这引导了垃圾回收分代的思想





新生代的回收：
使用了复制，eden,survivor from, survivir to






java 各个版本默认的垃圾回收器

